add_markers()
################################################################################
#        checking correlations between imputed-tx and SLI phenotypes           #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
library(ggh4x);library(ggpubr);library(ggrepel)
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/SLI"
setwd(project.dir)
################################################################################
factors <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/factors/pheno_factors_resid.csv")
sample.mappings <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/pheno_age_corrected.csv") %>%
select(id, sample = core_id) %>%
filter(sample %in% factors$sample)
tx.phe.corr <- read_rds("data/derivatives/gene-by-phenotype-correlations/combined-brain-data.rds")
gc()
################################################################################
################################################################################
################################################################################
################################################################################
################################################################################
# check how many gene of Tanner's langugae list are there with significant pearson corr
tk.genes <- read.csv("/wdata/common/SLI_WGS/gene-lists/Language-Literatue-Review-Genes.csv")
right_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
# tx.phe.corr %>% rename(gene = V2) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
group_by(tissue, V1) %>%
drop_na() %>%
dplyr::summarise(count = n()) %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y=grade, fill = count, label = ifelse(count>5,count,""))) +
# geom_bar(width = 0.5) +
geom_tile() +
geom_text(size = 3) +
# geom_bar(stat = "identity") +
facet_grid2(rows = vars(phenotype),
scales = "free", space = "free")+
labs(x="", y="") +
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
top_n(100) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
top_n(5)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
top_n(5) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:14] %>% select(gene =1),
relationship = "many-to-many") %>%
# top_n(5) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:14,] %>% select(gene =1),
relationship = "many-to-many") %>%
# top_n(5) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:14,] %>% select(gene =1),
relationship = "many-to-many") %>%
# top_n(5) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
# top_n(5) %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:16,] %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90),
strip.text.x.bottom = element_text(size=7)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:16,] %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90),
strip.text.x.bottom = element_text(size=5)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:16,] %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90),
axis.text.x.bottom = element_text(size=7)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes[1:16,] %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90),
axis.text.x.bottom = element_text(size=8)
)
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
labs(x = "", y="", title = "correlation between imputed tx for TK language genes and phenotypes per tissue")
inner_join(tx.phe.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = grade))+
geom_tile(aes(fill = r)) +
facet_grid2(rows = vars(phenotype),axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
labs(x = "", y="", title = "correlation between imputed tx for TK language genes and phenotypes per tissue") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90),
axis.text.x.bottom = element_text(size=7)
)
#   f <- read_csv(paste0("data/derivatives/factors-predicting-gene/", files[i])) %>%
#     mutate(tissue = sub(".csv", "", files[i]))
#   return(f)
# }
# tx.fa.corr.filt <- tx.fa.corr %>%
#   filter(grepl("Brain", tissue)) %>%
#   group_by(tissue) %>%
#   mutate(FDR = p.adjust(`Pr(>|t|)`))
# ################################################################################
# # gene by factor correlations
files <- list.files("data/derivatives/gene-by-factor-correlations")
#   f <- read_csv(paste0("data/derivatives/factors-predicting-gene/", files[i])) %>%
#     mutate(tissue = sub(".csv", "", files[i]))
#   return(f)
# }
# tx.fa.corr.filt <- tx.fa.corr %>%
#   filter(grepl("Brain", tissue)) %>%
#   group_by(tissue) %>%
#   mutate(FDR = p.adjust(`Pr(>|t|)`))
# ################################################################################
# # gene by factor correlations
files <- list.files("data/derivatives/gene-by-factor-correlations", pattern = "Brain")
ge.fa.corr <- foreach(i=1:length(files), .combine = rbind) %dopar% {
f <- read_csv(paste0("data/derivatives/gene-by-factor-correlations/", files[i])) %>%
mutate(tissue = sub(".csv", "", files[i])) %>%
mutate(FDR = p.adjust(pval, method = "fdr")) %>%
filter(pval<0.05)
return(f)
}
View(ge.fa.corr)
write_rds(ge.fa.corr, "data/derivatives/gene-by-factor-correlations/combined-sig-brain-data.rds")
# # gene by factor correlations
# files <- list.files("data/derivatives/gene-by-factor-correlations", pattern = "Brain")
# ge.fa.corr <- foreach(i=1:length(files), .combine = rbind) %dopar% {
#   f <- read_csv(paste0("data/derivatives/gene-by-factor-correlations/", files[i])) %>%
#     mutate(tissue = sub(".csv", "", files[i])) %>%
#     mutate(FDR = p.adjust(pval, method = "fdr")) %>%
#     filter(pval<0.05)
#   return(f)
# }
# write_rds(ge.fa.corr, "data/derivatives/gene-by-factor-correlations/combined-sig-brain-data.rds")
ge.fa.corr <- read_rds("data/derivatives/gene-by-factor-correlations/combined-sig-brain-data.rds")
View(ge.fa.corr)
################################################################################
# check available TK genes in gene factors sig correlations
# plot how many genes of TK list are there in your gene-phenotype sig correlation
right_join(ge.fa.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
group_by(tissue, V1) %>%
drop_na() %>%
dplyr::summarise(count = n()) %>%
mutate(grade = sub("_.*", "", V1),
phenotype = factor(sub("^[^_]+_([^_]+)_(\\w+)$", "\\2", V1)),
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y=grade, fill = count, label = ifelse(count>5,count,""))) +
geom_tile() +
geom_text(size = 3) +
facet_grid2(rows = vars(phenotype),
scales = "free", space = "free")+
labs(x="", y="") +
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
theme(strip.text.y.right = element_text(angle = 0),
strip.text.x.top = element_text(angle = 90)
)
################################################################################
# check available TK genes in gene factors sig correlations
# plot how many genes of TK list are there in your gene-phenotype sig correlation
right_join(ge.fa.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
group_by(tissue, V1) %>%
drop_na() %>%
dplyr::summarise(count = n()) %>%
mutate(phenotype = V1,
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y=phenotype, fill = count, label = ifelse(count>5,count,""))) +
geom_tile() +
geom_text(size = 3) +
labs(x="", y="") +
my.guides + scale_fill_gradient2(low = "black", high = "#800000")
# plot heatmap for correlations found between tx and factors for language genes in all brain tissues
inner_join(ge.fa.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
drop_na() %>%
mutate(phenotype = V1,
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y = phenotype))+
geom_tile(aes(fill = r)) +
facet_grid2(axes = "all" ,remove_labels = "all",
cols = vars(gene),
scales = "free", space = "free")+
my.guides + scale_fill_gradient2(low = "black", high = "#800000") +
labs(x = "", y="", title = "correlation between imputed tx for TK language genes and factors per tissue") +
theme(strip.text.x.top = element_text(angle = 90),
axis.text.x.bottom = element_text(size=7)
)
################################################################################
# check available TK genes in gene factors sig correlations
# plot how many genes of TK list are there in your gene-factor sig correlation
right_join(ge.fa.corr %>% rename(gene = V2),
tk.genes %>% select(gene =1),
relationship = "many-to-many") %>%
distinct(V1, gene, tissue, .keep_all = T) %>%
group_by(tissue, V1) %>%
drop_na() %>%
dplyr::summarise(count = n()) %>%
mutate(phenotype = V1,
tissue = sub("Brain_", "", tissue)) %>%
ggplot(aes(x = tissue, y=phenotype, fill = count, label = ifelse(count>5,count,""))) +
geom_tile() +
geom_text(size = 3) +
labs(x="", y="") +
my.guides + scale_fill_gradient2(low = "black", high = "#800000")
library(Seurat)
?Seurat::VlnPlot
install.packages(c("admisc", "airr", "askpass", "BayesFactor", "bayesm", "BiasedUrn", "BiocManager", "bookdown", "broom", "bslib", "Cairo", "CCA", "checkmate", "classInt", "clock", "clue", "colourpicker", "confintr", "covr", "cpp11", "credentials", "crul", "curl", "cyclocomp", "datawizard", "dbplyr", "deldir", "DEoptimR", "deSolve", "dotCall64", "downlit", "dplyr", "dqrng", "DT", "effectsize", "ellipse", "emmeans", "europepmc", "evaluate", "fansi", "fastmatch", "fda", "fields", "flexdashboard", "fontawesome", "foreign", "forestplot", "fs", "future", "future.apply", "gargle", "gert", "getopt", "ggcorrplot", "ggExtra", "ggfun", "ggh4x", "ggnewscale", "ggplot2", "ggplotify", "ggpmisc", "ggpp", "ggrepel", "ggstatsplot", "glmnet", "googledrive", "googlesheets4", "gprofiler2", "graphlayouts", "gtable", "haven", "Hmisc", "htmltools", "httpuv", "httr", "hunspell", "igraph", "insight", "jtools", "KernSmooth", "knitr", "ks", "labeling", "labelled", "lattice", "lavaan", "LDlinkR", "limSolve", "lintr", "lme4", "locfit", "lpSolve", "lubridate", "magick", "markdown", "Matrix", "MatrixModels", "matrixStats", "mc2d", "meta", "metafor", "mgcv", "minqa", "mockery", "mvtnorm", "nlme", "nnls", "officer", "openssl", "packrat", "pak", "parallelly", "parameters", "parsnip", "patchwork", "pbapply", "performance", "pkgbuild", "pkgload", "plotly", "plyr", "polyclip", "prettyunits", "pROC", "prodlim", "progressr", "promises", "proxyC", "psych", "purrr", "qdapRegex", "quantreg", "ragg", "RcppAnnoy", "RcppArmadillo", "readODS", "readxl", "recipes", "rematch", "remotes", "reticulate", "RGCCA", "rio", "RMariaDB", "rmarkdown", "RNifti", "robustbase", "rpart", "rsample", "rstudioapi", "s2", "scattermore", "scatterpie", "sctransform", "SentimentAnalysis", "seriation", "Seurat", "SeuratObject", "sf", "shiny", "Signac", "slider", "sp", "spam", "spatstat.data", "spatstat.explore", "spatstat.geom", "spatstat.random", "spatstat.sparse", "spatstat.utils", "statsExpressions", "survival", "svglite", "systemfonts", "syuzhet", "testthat", "text", "textshaping", "tidytree", "tinytex", "tune", "tzdb", "units", "usethis", "utf8", "uuid", "uwot", "vctrs", "viridis", "vroom", "webshot", "withr", "wk", "xfun", "yulab.utils"))
install.packages("statsExpressions")
install.packages(c("gmp", "Rmpfr", "PMCMR", "PMCMRplus"))
install.packages("ggstats")
install.packages("ggstatsplot")
install.packages("gmp")
install.packages("gmp")
install.packages("gmp")
install.packages("ggstats")
install.packages(c("Rmpfr", "PMCMR", "PMCMRplus"))
install.packages("sf")
install.packages("sf")
install.packages(c("gmp", "Rmpfr"))
################################################################################
#        checking correlations between imputed-tx and SLI phenotypes           #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
library(ggh4x);library(ggpubr);library(ggrepel)
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/SLI"
setwd(project.dir)
################################################################################
factors <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/factors/pheno_factors_resid.csv")
sample.mappings <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/pheno_age_corrected.csv") %>%
select(id, sample = core_id) %>%
filter(sample %in% factors$sample)
################################################################################
################################################################################
################################################################################
# random forest predicting factors scores from imputed gene expression
library(randomForest)
factors <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/factors/pheno_factors_resid.csv")
sample.mappings <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/pheno_age_corrected.csv") %>%
select(id, sample = core_id) %>%
filter(sample %in% factors$sample)
#####
tissue.ls <- c("Adipose_Subcutaneous", "Adipose_Visceral_Omentum", "Adrenal_Gland", "Artery_Aorta", "Artery_Coronary", "Artery_Tibial", "Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia", "Breast_Mammary_Tissue", "Cells_EBV-transformed_lymphocytes", "Cells_Transformed_fibroblasts", "Colon_Sigmoid", "Colon_Transverse", "Esophagus_Gastroesophageal_Junction", "Esophagus_Mucosa", "Esophagus_Muscularis", "Heart_Atrial_Appendage", "Heart_Left_Ventricle", "Liver", "Lung", "Muscle_Skeletal", "Nerve_Tibial", "Ovary", "Pancreas", "Pituitary", "Prostate", "Skin_Not_Sun_Exposed_Suprapubic", "Skin_Sun_Exposed_Lower_leg", "Small_Intestine_Terminal_Ileum", "Spleen", "Stomach", "Testis", "Thyroid", "Uterus", "Vagina", "Whole_Blood")
i=8
tissue <- tissue.ls[i]
tissue.tx.r <- pdsload(paste0("data/derivatives/imputed-tx/", tissue, ".rds.pxz"))
tissue.tx <- tissue.tx.r[rownames(tissue.tx.r) %in% sample.mappings$id,] %>%
as.data.frame() %>%
rownames_to_column("id")
rm(tissue.tx.r); gc()
ge.names <- data.frame(o = colnames(tissue.tx)[-1]) %>%
mutate(n = sub("-", "_", o))
colnames(tissue.tx)[-1] <- ge.names$n
tx.fa <- inner_join(factors, inner_join(sample.mappings,tissue.tx)) %>%
select(starts_with("Factor"), colnames(tissue.tx)[-1])
# Train the Random Forest model
rf.model <- randomForest(as.formula(paste0(paste(paste0("Factor", 1:7), collapse = " + "), " ~ .")),
data = tx.fa,
ntree = 100)
# Get feature importance
importance <- rf.model$importance %>%
as.data.frame() %>%
rownames_to_column("gene") %>%
mutate(tissue = tissue)
p2 <- data.frame(o = rf.model$y, predicted = rf.model$predicted)
View(p2)
p2 <- p2 %>% mutate(tt = rowSums(tx.fa[,1:7]))
################################################################################
# do a CCA using phenotypes and imputed tx for language genes
sli.pgs <- read_csv("/sdata/devGenes/merged_arrays/polygenic_scores/LDPred2_gathered_pgs_pc_corrected_long.csv")
View(sli.pgs)
length(unique(sli.pgs$IID))
################################################################################
#        checking correlations between imputed-tx and SLI phenotypes           #
################################################################################
rm(list = ls())
gc()
source("/Dedicated/jmichaelson-wdata/msmuhammad/msmuhammad-source.R")
library(ggh4x);library(ggpubr);library(ggrepel)
################################################################################
################################################################################
project.dir <- "/Dedicated/jmichaelson-wdata/msmuhammad/projects/SLI"
setwd(project.dir)
################################################################################
# do a CCA using phenotypes and imputed tx for language genes
phenotypes <- read_csv("/Dedicated/jmichaelson-wdata/common/SLI_WGS/public/phenotype/pheno_imputed.csv")
tissue.ls <- c("Brain_Anterior_cingulate_cortex_BA24", "Brain_Caudate_basal_ganglia", "Brain_Cerebellar_Hemisphere", "Brain_Cerebellum", "Brain_Cortex", "Brain_Frontal_Cortex_BA9", "Brain_Hippocampus", "Brain_Hypothalamus", "Brain_Nucleus_accumbens_basal_ganglia", "Brain_Putamen_basal_ganglia")
registerDoMC(cores=4)
i=1
tissue <- tissue.ls[i]
tissue.tx.r <- pdsload(paste0("data/derivatives/imputed-tx/", tissue, ".rds.pxz"))
tissue.tx <- tissue.tx.r[rownames(tissue.tx.r) %in% phenotypes$id,] %>%
as.data.frame() %>%
rownames_to_column("id")
rm(tissue.tx.r); gc()
tx.phe <- inner_join(phenotypes, tissue.tx)
View(tx.phe)
dev.off()
tx.phe %>%
ggplot(aes(x=OPA3, y = g0_sentence_grammatic_understanding)) +
geom_point() +
geom_smooth()
tx.phe %>%
ggplot(aes(x=OPA3, y = g0_sentence_grammatic_understanding)) +
geom_point() +
geom_smooth(method = "glm") +
stat_cor()
tx.phe %>%
ggplot(aes(x=scale(OPA3), y = scale(g0_sentence_grammatic_understanding))) +
geom_point() +
geom_smooth(method = "glm") +
stat_cor()
tx.phe %>%
ggplot(aes(x=scale(CDH2), y = scale(g0_sentence_grammatic_understanding))) +
geom_point() +
geom_smooth(method = "glm") +
stat_cor()
tx.phe %>%
ggplot(aes(x=scale(CDH2), y = scale(g0_sentence_sentence_imitation))) +
geom_point() +
geom_smooth(method = "glm") +
stat_cor()
tx.phe %>%
ggplot(aes(x=scale(HLCS), y = scale(g0_sentence_sentence_imitation))) +
geom_point() +
geom_smooth(method = "glm") +
stat_cor()
library(ggh4x);library(ggpubr);library(ggrepel);library(RGCCA)
